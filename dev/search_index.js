var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImplicitAD","category":"page"},{"location":"#ImplicitAD","page":"Home","title":"ImplicitAD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ImplicitAD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ImplicitAD]","category":"page"},{"location":"#ImplicitAD.computeA-NTuple{4, Any}","page":"Home","title":"ImplicitAD.computeA","text":"compute Aij = ∂ri/∂y_j\n\n\n\n\n\n","category":"method"},{"location":"#ImplicitAD.implicit_function-Tuple{Any, Any, Any}","page":"Home","title":"ImplicitAD.implicit_function","text":"implicit_function(solve, residual, x, drdy=nothing, drdx=nothing)\n\nMake implicit function AD compatible (specifically with ForwardDiff and ReverseDiff).\n\nArguments\n\nsolve::function: y = solve(x). Solve implicit function (where residual(x, y) = 0) given input x and return states y(x).\nresidual::function: r = residual(x, y). Return residual given input x and state y.\nx::vector{float}: evaluation point.\ndrdy::function: ∂r/∂y = drdy(x, y). Defaults to nothing. Set to a function if you can provide the partials directly.\ndrdx::function: ∂r/∂x = drdx(x, y). Defaults to nothing. Set to a function if you can provide the partials directly.\n\n\n\n\n\n","category":"method"},{"location":"#ImplicitAD.jvp-NTuple{5, Any}","page":"Home","title":"ImplicitAD.jvp","text":"Compute Jacobian vector product b = B*v where Bij = ∂ri/∂x_j\n\n\n\n\n\n","category":"method"},{"location":"#ImplicitAD.pack_dual-Tuple{AbstractFloat, Any, Any}","page":"Home","title":"ImplicitAD.pack_dual","text":"Create a ForwardDiff Dual with value yv, derivatives dy, and Dual type T\n\n\n\n\n\n","category":"method"},{"location":"#ImplicitAD.unpack_dual-Tuple{Any}","page":"Home","title":"ImplicitAD.unpack_dual","text":"unpack ForwardDiff Dual return value and derivative.\n\n\n\n\n\n","category":"method"},{"location":"#ImplicitAD.vjp-NTuple{5, Any}","page":"Home","title":"ImplicitAD.vjp","text":"Compute vector Jacobian product c = B^T v = (v^T B)^T where Bij = ∂ri/∂x_j and return c\n\n\n\n\n\n","category":"method"}]
}
